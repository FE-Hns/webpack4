{"version":3,"file":"app.c4edcf761e92ca8abc76.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// import Header from './header'\r\n// import Content from './content'\r\n// import Siderbar from './siderbar'\r\n// new Header();\r\n// new Content();\r\n// new Siderbar();\r\n// import test from './test.jpg';\r\n// // 如果开启了css module那么，这么引入是无效的\r\n// // import './test.less'\r\n// // import style from './index.less';\r\n// import style from './index.less'\r\n// console.log(style)\r\n// // import './index.less'\r\n// // 你会发现其实引入的test图片就是一个图面的name\r\n// // console.log(test)\r\n\r\n\r\n\r\n// var root = document.getElementById('root');\r\n// var img = new Image();\r\n// img.src = test;\r\n// img.classList.add(style.img);\r\n// root.append(img);\r\n// // iconfont部分\r\n// var div = document.createElement('div');\r\n// var classList = div.className.split(\"\");\r\n// classList.push(style[\"iconfont\"]+\" \"+style[\"icon-fangshai\"]);\r\n// div.className = classList;\r\n// root.append(div)\r\n\r\n// 为了验证ES6语法，所以写了比较新的ES6语法\r\n// 需要加入polly，按需进行ES6语法转化\r\n// const arr = [\r\n//     new Promise(() => {\r\n\r\n//     }),\r\n//     new Promise(() => {\r\n\r\n//     })\r\n// ]\r\n// arr.map(item => {\r\n//     console.log(\"neisun\");\r\n//     console.log(item);\r\n// })\r\n// import {add} from './math';\r\n// add(1,2);\r\n\r\n// code splitting\r\n// 静态引入\r\n// import _ from 'lodash';\r\n// import $ from 'jquery';\r\n// // 自己写的一个模块，文件大小不满足30000字节，于是不会做代码分割，而是打包到了index.js文件中\r\n// import test from './test'\r\n// console.log(_.VERSION);\r\n// console.log($.VERSION);\r\n// console.log(test.name);\r\n\r\n// code splitting\r\n// 动态引入的模块，会自动打包\r\n// 可以加入魔法注释来修改动态引入模块的命名，改写成我们自己想要的名字\r\n// function getComponent() {\r\n//     return import( /* webpackChunkName:\"lodash\"*/ 'lodash').then(({default:_}) => {\r\n//         var ele = document.createElement('div');\r\n//         ele.innerHTML = _.join([\"hello\",\"world\"],\",\");\r\n//         return ele;\r\n//     })\r\n// }\r\n// getComponent().then(ele => {\r\n//     document.getElementById('root').appendChild(ele);\r\n// })\r\n\r\n\r\n// prefetch\r\n// const btn1 = document.createElement('button');\r\n// const btn2 = document.createElement(\"button\");\r\n// let myDialog;\r\n// btn1.innerHTML = \"打开\";\r\n// btn2.innerHTML = \"关闭\";\r\n// document.getElementById(\"root\").append(btn1);\r\n// document.getElementById(\"root\").append(btn2);\r\n// btn1.addEventListener(\"click\",() => {\r\n//     import(\r\n//         // 魔法注释 模块名字\r\n//         /* webpackChunkName:'dialog' */ \r\n//         // 魔法注释 预加载\r\n//         /* webpackPrefetch:true */ \r\n//         \"./diglog\")\r\n//     .then(({default:Dialog}) => {\r\n//         myDialog = new Dialog(document.getElementById(\"root\"));\r\n//         myDialog.open();\r\n//     })\r\n// })\r\n// btn2.addEventListener(\"click\",() => {\r\n//     myDialog.close();\r\n// })\r\n\r\n// 抽离css文件 css文件的代码分割\r\n// 在webpack4中，官方推出了抽离css的文件的插件\r\n// 而且抽离css一般是在生产环境才会做的\r\n// import \"./style.css\";\r\n// import \"./style1.css\";\r\n// import \"./style.less\";\r\n// console.log(1111)\r\n\r\n\r\n\r\n// webpack与浏览器的缓存\r\n// import _ from 'lodash';\r\n// import $ from  'jquery';\r\n\r\n// var dom = $('<div>');\r\n// dom.html(_.join(['hello','world'],'----'));\r\n// dom.appendTo($('body'));\r\n\r\n// shimming部分\r\n// 使用shimming的原因在于有一些第三方库没有按照模块书写的规则，所以我们需要配置shimming\r\n// import $ from \"jquery\";\r\n// import {ui} from './jquery.ui'\r\n// $('body').html(\"test!\");\r\n// ui();\r\n\r\n\r\n// PWA部分\r\nconsole.log(\"hello world!\");\r\nif(\"serviceWorker\" in navigator){\r\n    window.addEventListener(\"load\",() => {\r\n        navigator.serviceWorker.register(\"./service-worker.js\")\r\n        .then(registration => {\r\n            console.log(\"SW registered\",registration)\r\n        })\r\n        .catch(error => {\r\n            console.log(\"SW registered failed\",error)\r\n        })\r\n    })\r\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClsourceRoot":""}